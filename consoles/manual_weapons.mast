# This will just spawn the label as a sub task
route_gui_navigate("normal_weap", manual_weapons_start)


# this could be a subtask or routed
==== manual_weapons_start ====

# //gui/normal_weap

ship_id = sbs.get_ship_of_client(client_id)
mast_scheduler.page.add_console_widget("3dview")
# gui_update_widget_list("3dview")
gui_section("area: 0,70,50,90;")
with gui_sub_section():
    gui_layout_widget("3dview")
    source = Vec3(0,0, 0)
    ## source = source.rotate_around(Vec3(0,0,0), 0, orbit, 0)
    gui_cinematic_full_control(client_id, ship_id, source, ship_id, source)

manual =  gui_region("area: 0,90,50,100;orientation:BT;")


latest_target = None

on change get_weapons_selection(ship_id):
    jump  manual_weapons_show


==== manual_weapons_show ====
ship_id = sbs.get_ship_of_client(client_id)
ship = to_object(ship_id)

jump  manual_weapons_maximize if ship is not None and ship.get_inventory_value("MANUAL_BEAMS_ON", False)

==== manual_weapons_minimize =======
ship_id = sbs.get_ship_of_client(client_id)
ship = to_object(ship_id)
yield fail if ship is None

with gui_rebuild(manual):
    gui_row("row-height: 3em;")
    #ib = gui_icon("icon_index:112;color:yellow;", style="click_color: blue; click_text:_; click_font:gui-5; click_tag:manual_beams")
    #on gui_click(ib):
    cb = gui_checkbox("text:Manual;state:True")
    cb.value = ship.get_inventory_value("MANUAL_BEAMS_ON", False)
    on gui_message(cb):
        ship_id = sbs.get_ship_of_client(client_id)
        ship = to_object(ship_id)
        if ship_id != 0 and ship is not None:
            ship.set_inventory_value("MANUAL_BEAMS_ON", not ship.get_inventory_value("MANUAL_BEAMS_ON", False))
        jump manual_weapons_maximize
    gui_blank(4)
    gui_row()
    gui_blank()


yield idle

====== manual_weapons_maximize =====
#
# This adds the window to a gui about to present
#

ship_id = sbs.get_ship_of_client(client_id)
yield fail if ship_id == 0
ship = to_object(ship_id)
yield fail if ship is None
target_id = get_weapons_selection(ship_id)
jump manual_weapons_minimize if target_id==0
_target = to_object(target_id)
jump manual_weapons_minimize if _target is None

dist = sbs.distance_id(ship_id, target_id)

jump manual_weapons_minimize if dist > 2000

s_pos = Vec3(ship.pos)
t_pos = Vec3(_target.pos)
diff = s_pos -t_pos
n = diff.unit()
source = n *dist - 150

t = Vec3(0,0, 0)

gui_cinematic_full_control(client_id, ship_id, source, target_id, t)

name = _target.comms_id
# Drawing is bottom to top set in region style
with gui_rebuild(manual):
    gui_row("row-height: 3em;")
    # Bottom row 
    # ib = gui_icon("icon_index:112;color:green;", style="click_color: blue; click_text:_; click_font:gui-5; click_tag:min_manual_beams")
    # on gui_click(ib):
    cb = gui_checkbox("text:Manual;state:True")
    cb.value = ship.get_inventory_value("MANUAL_BEAMS_ON", False)
    on gui_message(cb):
        ship_id = sbs.get_ship_of_client(client_id)
        ship = to_object(ship_id)
        if ship_id != 0 and ship is not None:
            ship.set_inventory_value("MANUAL_BEAMS_ON", not ship.get_inventory_value("MANUAL_BEAMS_ON", False))
        jump manual_weapons_minimize
    gui_blank()
    on gui_message(gui_button("weapons")):
        _manual_system = sbs.SHPSYS.WEAPONS
        jump manual_weapons_shoot
    on gui_message(gui_button("engine")):
        _manual_system = sbs.SHPSYS.ENGINES
        jump manual_weapons_shoot
    on gui_message(gui_button("sensors")):
        _manual_system = sbs.SHPSYS.SENSORS
        jump manual_weapons_shoot
    gui_row("row-height: 2em;")
    gui_text(f"targeting {name}")
    gui_row()
    


    
    

#
# This ends execution of the task
# but keeps it alive
#
yield idle




==== manual_weapons_shoot  =======
# Re-get ship ID incase switch ship
ship_id = sbs.get_ship_of_client(client_id)
->END if ship_id == 0

critical = get_inventory_value(ship_id, "MANUAL_CRITICAL_HIT", False)
if _manual_system != latest_target:
    set_inventory_value(ship_id, "MANUAL_SYSTEM", _manual_system)
    set_inventory_value(ship_id, "MANUAL_CRITICAL_HIT", None)
    if critical:
        comms_broadcast(client_id, "Lost Critical hit, chance", "cyan")

latest_target = _manual_system

#
# If critical don't do it again
#
yield idle if critical

target_id = get_weapons_selection(ship_id)
yield = target_id==0
t = to_object(target_id)
jump manual_weapons_show if t is None

if random.randint(1,20) == 20:
    set_inventory_value(ship_id, "MANUAL_SYSTEM", _manual_system)
    set_inventory_value(ship_id, "MANUAL_CRITICAL_HIT", target_id)
    comms_broadcast(client_id, f"Potential Critical hit {t.name}", "yellow")


yield idle


//damage/object if has_role(DAMAGE_TARGET_ID, "raider")

system = get_inventory_value(DAMAGE_SOURCE_ID, "MANUAL_SYSTEM")
target_id = get_inventory_value(DAMAGE_SOURCE_ID, "MANUAL_CRITICAL_HIT")
->END if target_id == 0

->END if target_id != DAMAGE_TARGET_ID

set_inventory_value(DAMAGE_SOURCE_ID, "MANUAL_SYSTEM", None)
set_inventory_value(DAMAGE_SOURCE_ID, "MANUAL_CRITICAL_HIT", None)

->END if system is None
->END if target_id is None

t = to_object(target_id)
->END if t is None

#
# Cause some damage
#
max_damage = t.data_set.get('system_max_damage', system)
cur = t.data_set.get('system_damage', system)
if cur < 1:
    cur = 1
up = cur*1.35

# Note: this may not by the same task or client ID of the weapons
# So don't assume it is
#

t.data_set.set('system_damage', up, system)
if cur > max_damage:
    comms_broadcast(DAMAGE_SOURCE_ID, f"{t.name} {system.name} Destroyed", "white")
else:

    comms_broadcast(DAMAGE_SOURCE_ID, f"Critical hit {t.name} {system.name}", "red")



->END
