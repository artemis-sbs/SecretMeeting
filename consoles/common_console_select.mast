route_change_console(select_console)
#
# Expects shared data 
#    player_list that has the list of player ships
#    player_count the number of expected player ships
#    game_started game state
#

========= client_main ==========
console_select = "helm"
client_select_ship = "artemis"
console_ready = False
ship_name = "artemis"
ship_type = player_list[0]["ship"] 
ship_type_def = player_list[0]["ship"]
shared ship_list = ""
client_selected_index = 0
shared valid_interiors = set()
mode = story_get_console_type()
if mode is not None:
    modes = mode.split(';')
    mode = None
    if len(modes)>=3:
        mode = modes[2]
        console_select = mode
        jump operator_admin_console if mode=='admin'
    


for key in grid_data:
    if len(grid_data[key]["grid_objects"])>0:
        sd = ship_data_get_ship_data_for(key)
        continue if sd is  None
        roles = sd.get("roles")
        continue if roles is None
        continue if "ship" not in roles
        valid_interiors.add(key)

========== select_console ==========
#print("CHNAGE CONSOLE EVENT?")
# default console_select = "helm"
# default client_select_ship = "artemis"

# Clamp selected index
client_selected_index = min(int(player_count), client_selected_index )


ship_type_def = player_list[client_selected_index]["ship"]
client_select_ship =player_list[client_selected_index]["name"].lower()
ship_name = client_select_ship


ship_sec = gui_region(style="area: 1,60px,40,105px")
with ship_sec:
    gui_row(style="row-height: 45px;")

    _input = "desc:Ship Name"
    on gui_message(gui_input(_input, var="ship_name")):
        player_list[client_selected_index]["name"] = ship_name
        client_select_ship = ship_name
        player_list[client_selected_index]["ship"] = ship_type
        gui_update_shared("sh_ship_list", None)

ship_sec2 = gui_region(style="area: 1,15,40,100")
with ship_sec2:
    gui_row() #style="row-height: 300px;")

    #
    # Specify only ships with defined engineering grid
    #
    gui_content(ship_picker_control(f"Your Ship", ship_type_def, ship_keys=valid_interiors), style="tag:sh_ship_picker", var="ship_type")
    on change ship_type:
        player_list[client_selected_index]["ship"] = ship_type
        gui_update_shared("sh_ship_picker", ship_type, {"client_select_ship": client_select_ship})
        gui_update_shared("sh_ship_list", None)

if console_select != "helm" or game_started:
    gui_hide(ship_sec)
    gui_hide(ship_sec2)



#
# List of available ships
#
gui_section( style="area: 50,60px,75,90;")
ship_list = player_list[:player_count]
lb_ships = ~~list_box_control(ship_list, 
                               text=lambda item: f"text:{item['name']};justify: center;",
                               title = lambda: "text:ship;justify:center;",
                               ship=lambda item: item['ship'],
                               background= "#1572", title_background="#1578",
                               select=True,
                               item_height=6,
                               convert_value = lambda item: item['name'].lower()
                               )~~

li_ships = gui_content(lb_ships, style="tag:sh_ship_list;", var="client_select_ship")
#
# List of available consoles
#
consoles = {"helm": 0,"weapons":0,"comms":0,"science":0,"engineering":0,"hangar":0,"mainscreen":0, "cinematic":0}

lb_consoles = ~~list_box_control(list(consoles.keys()), 
                               text=lambda item: f"text:{item};justify: center;",
                               title = lambda: "text:Console;justify:center;",
                               background= "#1572", title_background="#1578",
                               select=True,
                               item_height=6)~~

gui_section( style="area: 80,60px, 99,90-60px;")
gui_content(lb_consoles, var="console_select")
#
# Ready state
#
gui_section( style="area: 80,90-60px, 99,90;row-height: 50px;")

if not game_started:
    gui_checkbox("ready", var="console_ready")
else:
    on gui_message(gui_button("ready")):
        console_ready = True
        jump console_selected

if operator_mode_enabled:
    gui_row(style="padding:0,15px,0,0;")
    on gui_message(gui_button("admin")):
        jump operator_login


on change player_count:
    client_selected_index = min(client_selected_index, int(player_count)-1)
    # Just refresh if reduce ship count for now
    #jump select_console if len(lb_ships.items)>player_count
    # Otherwise can refresh faster if adding ships
    ship_list = player_list[:player_count]
    lb_ships.items = ship_list
    gui_represent(li_ships)
    gui_update_shared("sh_ship_list", None)

on change console_select:
    #
    # Redo gui if change involves helm
    #
    if console_select == "helm" and not game_started:
        gui_show(ship_sec)
        gui_show(ship_sec2)
    else:
        #print("hiding 1")
        gui_hide(ship_sec)
        #print("hiding 2")
        gui_hide(ship_sec2)

  


#
# See when other console changes the ships list?
#
#on change player_list[client_selected_index]["ship"]+player_list[client_selected_index]["name"]:
#    jump select_console


on change client_select_ship:
    for i in range(player_count):
        client_selected_index = i
        break if player_list[i]["name"].strip().lower() == client_select_ship.lower()

await gui()


# Multiple labels to call to get here

====== game_started_console ====
if not console_ready:
    jump select_console
#
# This delay lets the server finish
# building the map, some times 
# a race condition occurs like the grid objects 
# or player ship aren't spawn first
#
await delay_sim(1)

====== console_selected ====
if console_select is None or client_select_ship is None:
    jump select_console

_ship_id= None
for player_ship in to_object_list(role("__PLAYER__")):
    if player_ship.name.lower() == client_select_ship:
        _ship_id = player_ship.id

        sbs.assign_client_to_ship(client_id, _ship_id)
        assign_client_to_alt_ship(client_id, 0)
        #set_inventory_value(client_id, "assigned_ship", _ship_id)
        #
        # Clear any alt ship e.g. comms give orders
        #
        set_inventory_value(client_id, "2dview_alt_ship", 0)
        link(_ship_id, "consoles", client_id)
        


jump select_console if _ship_id is None




#
# This should get a skybox with client overriding, shp, overriding shared
#
sky_box = get_shared_variable("skybox", "sky1")
sky_box = get_inventory_value(_ship_id, "skybox", sky_box)
sky_box = get_inventory_value(client_id, "skybox", sky_box)
sbs.set_sky_box(client_id, sky_box)

====== show_console_selected ====
#
# Make it so the console can be found if needed
#
set_inventory_value(client_id, "CONSOLE_TYPE", console_select)
# Remove any console roles
for k in consoles:
    remove_role(client_id, k)
add_role(client_id, "console, {console_select}")
jump show_hangar if console_select == "hangar"
jump show_main_game_screen if console_select == "mainscreen"
jump show_cinematic_screen if console_select == "cinematic"


#------------------------------------------------------------------------------------------------------------
sbs.set_beam_damages(client_id, 7.0, difficulty)
#------------------------------------------------------------------------------------------------------------
#
# Handle jump drive
#
is_warp = False
is_jump = False
warp_nodes = to_object_list(grid_objects(_ship_id) & role("warp"))
#
_jump_nodes = to_object_list(grid_objects(_ship_id) & role("jump"))
_jump_nodes = role("jump")
#print(_jump_nodes)

is_warp = len(warp_nodes) > 0
is_jump = len(_jump_nodes) > 0

if console_select == "helm":
    _warp = 1 if is_warp else 0
    _jump = 1 if is_jump else 0
    _label = "JUMP" if is_jump else "WARP"

    blob = to_blob(_ship_id)
    blob.set("warp_drive_active",_warp,0)
    blob.set("jump_drive_active", _jump,0)
    blob.set("eng_control_label", _label, 3)

gui_add_console_tab(_ship_id, console_select, console_select, None)
gui_console(console_select, is_jump)
#
#
# Use a label replace to override: 
#   ==== replace: console_bottom_choices ====
#        You code
#
==== console_bottom_choices ====
await gui()

=========== debug_mast =========

task_count = 0
for sch in mast.schedulers:
    for tsk in sch.tasks:
        task_count += 1

gui_section( style="area: 0,50px, 100,100;")
"""""
Task count {task_count}
""""""
await gui(timeout=timeout(4))

jump debug_mast



======== show_cinematic_screen ===========

# Layout to assure it takes up full screen 

gui_section("area:0,0,100,100;")
gui_activate_console("cinematic")
gui_layout_widget("3dview")
set_inventory_value(_ship_id, "cinema_focus", _ship_id)

if _ship_id is None:
    print("WARNING: cinematic on None player ship")

sbs.assign_client_to_ship(client_id, _ship_id)
gui_cinematic_auto(client_id)

on change get_inventory_value(_ship_id, "cinema_focus"):
    focus_id = get_inventory_value(_ship_id, "cinema_focus", _ship_id)
    if focus_id is not None:
        sbs.assign_client_to_ship(client_id, focus_id)
        gui_cinematic_auto(client_id)

await gui()
