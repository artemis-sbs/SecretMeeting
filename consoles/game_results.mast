#
# Game Data
#

shared game_stats = ~~{
    "tsn_destroyed": 0,
    "kralien_ships_destroyed": 0,
    "skaraan_ships_destroyed": 0,
    "arvonian_ships_destroyed": 0,
    "torgoth_ships_destroyed": 0,
    "ximni_ships_destroyed": 0,
    "ships_surrender": 0,
    "start_time": sim.time_tick_counter
}~~


//destroy
##
## Called via route destroy
##
obj = to_object(DESTROYED_ID)
if obj is not None:
    side = "{obj.side.lower()}_destroyed"
    count = game_stats.get(side, 0)
    game_stats[side] = count + 1

    race = obj.art_id
    under = race.find("_")
    if under>=0:
        race = race[0:under]
        if race=="xim":
            race= "ximni"
        
        race = "{race.lower()}_ships_destroyed"
        count = game_stats.get(race, 0)
        game_stats[race] = count + 1

->END


============ task_end_game ======= 

await delay_sim(4)

if is_timer_set(SHARED, "time_limit") and is_timer_finished(SHARED, "time_limit"):
    left = role("raider")
    c = len(left)
    # End attack
    remove_role(left, "raider")
    start_text = "Mission time has run out! {c} enemies left."
    game_started = False
    game_ended = True
    sbs.play_music_file(0, "music/default/victory")
    gui_reroute_clients(show_game_results)
    gui_reroute_server(show_game_results)
    ->END

stations = role('tsn') & role('station')
if len(stations) ==0 and world_select != "deep strike":
    start_text = "Mission is lost!  All yer base are belong to us, dammit."
    game_started = False
    game_ended = True

    sbs.play_music_file(0, "music/default/failure")

    gui_reroute_clients(show_game_results)
    gui_reroute_server(  show_game_results)
    ->END


raiders = role('Raider')
# print (f"raiders {len(raiders)}")
if len(raiders)==0 and world_select !="peacetime":
    start_text = "Mission is won!  All the enemies have been destroyed."
    game_started = False
    game_ended = True
    sbs.play_music_file(0, "music/default/victory")
    gui_reroute_clients(show_game_results)
    gui_reroute_server(show_game_results)
    ->END

-> task_end_game



========== show_game_results ===============

sim_pause()

gui_section(style="area: 10, 10, 90, 90;")

"""color:white;justify: center; font: gui-6;text:Game results"""
gui_row()
"""""color:cyan;justify:center;font:gui-5;text:{start_text}"""""
gui_row()
gui_hole(5)
"""color:yellow;justify: right; text:TSN Destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["tsn_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right; text:arvonian ships destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["arvonian_ships_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right; text:kralien ships destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["kralien_ships_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right;text:skaraan ships destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["skaraan_ships_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right;text:ximni ships destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["ximni_ships_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right; text:torgoth ships destroyed"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["torgoth_ships_destroyed"]}"""

gui_row()
gui_hole(5)
"""color:yellow; justify: right;text:ships surrendered"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{game_stats["ships_surrender"]}"""
gui_row()
gui_hole(5)
end_time = int((sim.time_tick_counter - game_stats["start_time"]) / 30  /60)
"""color:yellow; justify: right; text:Game Time"""
gui_blank(style="col-width: 1;")
gui_hole(5)
"""color:yellow;justify: left; text:{end_time} minutes"""


mission = get_mission_name()
start_mission = get_startup_mission_name()
if start_mission is not None:
    same = mission == start_mission

if start_mission is None or start_mission=="":
    same = True
    start_mission = mission

await gui():
    + "replay":
        sbs.run_next_mission(mission)
    + "run startup" if not same:
        sbs.run_next_mission(start_mission)

# Kind of need to restart, which is good for now since cleanup is not guaranteed
