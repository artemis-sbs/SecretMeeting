
shared hangar_version = 1

set_inventory_value(client_id, "call_sign", "Selene")
#
#  Background task to look for strays
#
shared find_stray = task_schedule(find_stray_crafts)
#
# The route_spawn label is the entry point 
# it examines the SPAWNED_ID to either
# jump to another label proper for that item
# or END which stops running this task/flow 
#





//spawn if has_role(SPAWNED_ID, "__player__")
#
# For now put on a fighter on the player ship
#
# If you want it on based on grid objects,
# wait to be sure grid objects are one the 
# ship
# await delay_sim(2)
#
hangar_fighter_spawn(SPAWNED_ID, "tsn")


//spawn if has_roles(SPAWNED_ID, "tsn, station")
for x in range(random.randint(1,3)):
    hangar_random_craft_spawn(SPAWNED_ID, "tsn")



==== show_hangar ====
#
# Get all the available rides 
#

crafts = to_object_list(all_roles("cockpit,tsn,standby"))
briefing = "Select a craft to pilot. If you accept the mission hit launch."


gui_section(style="area: 0,0, 36,97;background: #fff1;")

call_sign = get_inventory_value(client_id, "call_sign", "Selene")
gui_section(style="area: 5,6,35,10;")
gui_input("desc:Call sign", var="call_sign")
on change call_sign:
    set_inventory_value(client_id, "call_sign", call_sign)

gui_section(style="area: 5,10+20px, 35, 49;")

ride_choice = None
ride_picker = gui_list_box(crafts,"row-height: 2em; background:#1572;", item_template=hangar_console_ship_template, title_template=hangar_console_title_template, select=True)
# ride_picker.title_background = "#1578"

gui_section(style="area: 5,50, 35,50+20px;")
gui_row(style="row-height:20px;")
gui_text("text:Mission Briefing;color: white;justify: center;", style="background: #1578;")
gui_section(style="area: 5,50+20px, 35,90;background: #1572;")
"""""
{briefing}
"""""" style="tag:briefing-text;padding: 10px,15px,10px,0;"


gui_activate_console("hangar")
gui_section(style="area: 36,0, 100,97;")

gui_layout_widget("2dview")

fighter_change = 0
on change ride_picker.get_value():
    ride_choice = ride_picker.get_value()
    if ride_choice is not None:
        fighter = ride_choice
        dock = get_science_selection(fighter)
        dock = to_object(dock)
        fighter_change += 1
 
        if dock is not None:
            sbs.assign_client_to_ship(client_id, dock.id)
            defa = f"Protect {dock.name}"
            briefing = get_inventory_value(fighter, "briefing", defa)
            gui_update("briefing-text", "text: {briefing}")

gui_section(style="area: 75,92, 100,97;background: #002;")
gui_text("select ship", style="tag:refit-text")

# Set a counter to allow timed refresh
# elegant or pure hack
start_counter(client_id, "refresh_status")
update_ticker = get_counter_elapsed_seconds(client_id, "refresh_status")+2

on change update_ticker < get_counter_elapsed_seconds(client_id, "refresh_status"):
    fighter_change += 1
    update_ticker = get_counter_elapsed_seconds(client_id, "refresh_status")+5

on change fighter_change:
    gui_update("refit-text", "text: select ship")
    fighter = ride_choice
    if is_timer_finished(fighter, "refit"):
        gui_update("refit-text", "text: ready to launch")
    else:
        refit_time = format_time_remaining(fighter, "refit")
        gui_update("refit-text", "text: refit - launch in {refit_time}")


# If a thing launches or docks things need to refresh
on change hangar_version:
    jump show_hangar


await gui():
#    + "Head to Bar":
#        print("Bar")
#        jump bar_enter
#    + "Casino":
#        print("Casino")
#        #jump show_hangar
#    + "Quarters":
#        print("Quarters")
#        #jump show_hangar
    + "Launch":
        if ride_choice is not None:
            ride_select = ride_choice
            #Dock ID replaced this? ###set_inventory_value(client_id, "assigned_ship", ride_select)
            link(ride_select , "consoles", client_id)
            jump launch_to_cockpit
        jump show_hangar

# print("Out of await")
jump show_hangar

==== launch_to_cockpit ======

jump show_hangar if ride_select is None
jump show_hangar if not has_role(ride_select, "standby")

jump show_hangar if not hangar_launch_craft(to_id(ride_select))

sbs.assign_client_to_ship(client_id,to_id(ride_select))
set_inventory_value(ride_select, "client_id", client_id)
set_dedicated_link(client_id, "craft_id", ride_select)

gui_console("cockpit")

await gui()



//dock if has_roles(EVENT.parent_id, "cockpit")

fighter_so = to_object(EVENT.parent_id)
fighter = fighter_so.engine_object

if hangar_attempt_dock_craft(fighter_so.id):
    fighter_client = get_inventory_value(fighter_so.id, "client_id")
    if fighter_client is not None:
        set_dedicated_link(fighter_client, "craft_id", None)    
        gui_reroute_client(fighter_client, show_hangar)

->END


==== find_stray_crafts ====
await delay_sim(seconds=1) # hack for task_schedule in main

print("finding stray fighters start")

==== find_stray_craft_loop ====
await delay_sim(seconds=3) # Run every 23 seconds
launched_crafts = role("cockpit") & role("tsn") - role("standby")
for craft in launched_crafts:
    cid = get_inventory_value(craft, "client_id")
    cid_obj = to_object(cid)
    if cid_obj is None:
        print("Client disconnected")
    #
    # check if this is the correct fighter
    #
    continue if craft == get_dedicated_link(cid, "craft_id") and get_inventory_value(cid, "CONSOLE_TYPE") == "cockpit"
    so = to_object(craft)
    continue if so is None
    # print("Return craft {so.name}")
    redocked = hangar_attempt_dock_craft(craft, None)
    if redocked:
        print("redocked")
    else:
        print("redocked FAILED")
        
jump find_stray_craft_loop
