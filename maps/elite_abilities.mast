
build_task = None

//spawn if has_role(SPAWNED_ID, "elite")
task_schedule(handle_elite_abilities)

==== handle_elite_abilities
so = to_object(SPAWNED_ID)
-> END if None == so
    

# Get the abilities managed by script
all_abilities = elite_get_non_engine()
abilities = []

for ab in all_abilities:
    if has_role(SPAWNED_ID, ab):
        abilities.append(ab)

# Don't need this is there are no scripted abilities
-> END if len(abilities) == 0

ab = random.choice(abilities)

#
# This will run a sequence based on the elite type
# awaiting will wait until the sequence is finished
#
data={"BT_ID": SPAWNED_ID} 
if ab == "elite_cloak":
    await task_schedule(elite_cloak_start, data={"BT_ID": SPAWNED_ID})
elif ab == "elite_jump_forward":
    await task_schedule(elite_jump_drive, data={"BT_ID": SPAWNED_ID, "distance": 5000})
elif ab == "elite_jump_back":
    await task_schedule(elite_jump_drive, data={"BT_ID": SPAWNED_ID, "distance": -5000})
elif ab == "elite_warp":
    await task_schedule(elite_warp_start, data =data)
elif ab == "elite_het_turn":
    await task_schedule(elite_turn_start, data={"BT_ID": SPAWNED_ID})
elif ab == "elite_tractor":
    await task_schedule(elite_tractor_start, data={"BT_ID": SPAWNED_ID})
elif ab == "elite_shield_drain":
    await task_schedule(elite_shield_drain_start, data=data)
elif ab == "elite_shield_vamp":
    await task_schedule(elite_shield_drain_start, data={"BT_ID": SPAWNED_ID, "vamp": True})
elif ab == "elite_shield_scramble":
    await task_schedule(elite_shield_scramble_start, data={"BT_ID": SPAWNED_ID})        
else:
    await delay_sim(seconds=30)

-> handle_elite_abilities



==== elite_cloak_start ======
old_art_id = get_inventory_value(BT_ID, "visible_art_id")
yield FAIL if None != old_art_id #if I'm currently cloaked

set_inventory_value(BT_ID, "visible_art_id", so.art_id) # remember art id that's visible
so.set_art_id("invisible") # cloaking!
sim.force_update_to_clients(BT_ID)
sbs.particle_on(so.engine_object, "align:False; offset:0,0,200;color:pink; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")

await delay_sim(30)

==== elite_cloak_clear ======
so = to_object(BT_ID)
yield FAIL if so is None

old_art_id = get_inventory_value(BT_ID, "visible_art_id")
#log(f"uncloak to {old_art_id}", "elites")
so.set_art_id(old_art_id)
sim.force_update_to_clients(BT_ID)
set_inventory_value(BT_ID, "visible_art_id", None)
sbs.particle_on(so.engine_object, "align:False; offset:0,0,200;color:pink; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")

await delay_sim(10)
yield SUCCESS

==== elite_jump_drive ======
so = to_object(BT_ID)
yield FAIL if so is None

eo = to_engine_object(BT_ID)
_pos_eo = eo.pos
sbs.particle_at(_pos_eo, "align:False; offset:0,0,200;color:blue; lifespan:50; image_cell:9; size:10; speed: 2; count:1000")
distance = get_variable("distance")

_forward = Vec3(eo.forward_vector())
_pos = Vec3(_pos_eo) + (_forward * distance)
so.pos = _pos

await delay_sim(30)

yield SUCCESS


=== elite_warp_start === 
blob = to_blob(BT_ID)
yield FAIL if blob is None
# Set the current Value

cur = blob.get("speed_coeff", 0)
set_variable("speed_coeff", cur)
# double it 
blob.set("speed_coeff", cur*2.0, 0)

await delay_sim(5)


=== elite_warp_clear === 
blob = to_blob(BT_ID)
yield FAIL if blob is None
# Set the current Value
cur = get_variable("speed_coeff", 1.0)
# Restore
blob.set("speed_coeff", cur, 0)

await delay_sim(30)
yield SUCCESS


=== elite_turn_start === 

blob = to_blob(BT_ID)
yield FAIL if blob is None
# Set the current Value
tru = blob.get("turn_upgrade_coeff", 0)
if tru is None:
    tru = 1.0

set_variable("turn_upgrade_coeff", tru)
# Triple it 
blob.set("turn_upgrade_coeff", tru*3.0, 0)
await delay_sim(30)

=== elite_turn_clear === 

blob = to_blob(BT_ID)
yield FAIL if blob is None
# Set the current Value
tru = get_variable("turn_upgrade_coeff", 1.0)
# Restore
blob.set("turn_upgrade_coeff", tru, 0)

await delay_sim(10)
yield SUCCESS

==== elite_tractor_start === 
# Fail early if nothing is near


yield SUCCESS

==== elite_tractor_clear === 
# Fail early if nothing is near


yield SUCCESS

==== elite_shield_drain_start === 
# Fail early if nothing is near
yield FAIL if BT_ID is None or not object_exists(BT_ID)
local = broad_test_around(BT_ID, 2500,2500, 0xF0) # Find ships around here
#
# Target 
#
target_id = closest(BT_ID, local - role(get_side(BT_ID)))

yield FAIL if target_id is None
target_eo = to_engine_object(target_id)
yield FAIL if target_eo is None
is_vamp = get_variable("vamp", False)
color = "cyan,blue"
if is_vamp:
    color = "yellow,brown"

emittor_id = sbs.add_particle_emittor(target_eo, -1, f"align:True; shape:hull; color:{color}; lifespan:4; image_cell:0,3; size:0.8; speed: 5; count:10")
count = 5

==== elite_shield_drain_cycle === 
# Fail early if nothing is near
yield FAIL if BT_ID is None or not object_exists(BT_ID)
target_id = get_variable("target_id")
yield FAIL if target_id is None
emittor_id = get_variable("emittor_id")
yield FAIL if emittor_id is None

if not object_exists(target_id):
    sbs.delete_particle_emittor(emittor_id)
    yield FAIL

#
# Hit shield
#

r_blob = to_blob(target_id)
jump elite_shield_drain_clean_up if r_blob is None
shield_count = r_blob.get("shield_count", 0)
jump elite_shield_drain_clean_up if shield_count is None

for s in range(shield_count):
    sm = r_blob.get("shield_max_val", s)
    sv = r_blob.get("shield_val", s)
    sv -= 4
    sv = max(0, sv)
    r_blob.set("shield_val", sv, s)

is_vamp = get_variable("vamp", False)
if is_vamp:
    r_blob = to_blob(BT_ID)
    jump elite_shield_drain_clean_up if r_blob is None

    shield_count = r_blob.get("shield_count", 0)
    for s in range(shield_count):
        sm = r_blob.get("shield_max_val", s)
        sv = r_blob.get("shield_val", s)
        sv += 3
        sv = min(sm,sv)
        r_blob.set("shield_val", sv, s)
        
await delay_sim(5)

count += 1
jump elite_shield_drain_cycle if count < 5

==== elite_shield_drain_clean_up =====
sbs.delete_particle_emittor(emittor_id)
await delay_sim(10)
yield SUCCESS



==== elite_shield_scramble_start === 
# Fail early if nothing is near
blob = to_blob(BT_ID)
yield FAIL if blob is None
m = 100.0
for s in range(5):
    feq = random.uniform(m*0.1, m*0.8)
    # m -= feq
    blob.set("shield_freq_strength", feq, s)

await delay_sim(30)
yield success

